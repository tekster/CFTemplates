## tekster - 2025-01-16
## https://github.com/tekster/CFTemplates
## Create AWS/RDS/PostgreSQL demo instance 
## with baseline requirements
## Optional: "my-key-pair.pem" for EC2 connectivity

Parameters:
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
 # Creating Dedicated VPC for RDS/PostgreSQL
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 18.10.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value:  "VPC-RDS"
  MyRDSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Store password securely'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 12
        ExcludeCharacters: '"@/\'

#Creating Internet Gateway (free) for VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

#Attaching Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#Creating Public Subnet (1)
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-1a"
      VpcId: !Ref VPC
      CidrBlock: "18.10.10.0/24"
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: "stage"
        Value: "demo"

#Creating Public Subnet (2)
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-1b"
      VpcId: !Ref VPC
      CidrBlock: "18.10.20.0/24"
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: "stage"
        Value: "demo"

#Creating Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: "Public"

#Creating Route with full quad-zero access and attach Internet Gateway
  PublicRoute1:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway     

#Attaching Route table to our Public subnet
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref PublicRouteTable

#Creating Security Group for our EC2 Instance. Only SSH will be allowed.
  MySecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Enable SSH access via port 22
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: 'tcp'
              FromPort: '22'
              ToPort: '22'
              CidrIp: '0.0.0.0/0'
  

#Creating Security Group for our RDS Instance with port 5432 access
  DemoDBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Enable DB access via port 5432
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: 'tcp'
              FromPort: '5432'
              ToPort: '5432'
              CidrIp: '0.0.0.0/0'

# Create SubnetGroup for RDS instance.
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnets
      SubnetIds:
          - !Ref MySubnet1
          - !Ref MySubnet2

# Mention Database parameters. 
  DBParamGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Database Parameter Group + pg_stat_statements
      Family: 'postgres17'
      Parameters:
        shared_preload_libraries: pg_stat_statements

# Launch DB Inbstance.

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: demoDB  # Mention your database name
      DBInstanceIdentifier: 'CFDemo' # Provide name to your database instance.
      AllocatedStorage: '20'  # Provide size for your dabase. (in GB)
      DBInstanceClass: db.t4g.micro 
      Engine: postgres 
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecrets, ':SecretString:password}}' ]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParamGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
          - !GetAtt "DemoDBSecGroup.GroupId"
Outputs:
  DBInstanceEndpoint:
    Description: Endpoint to access the Postgres database
    Value: !GetAtt [DBInstance, Endpoint.Address]
